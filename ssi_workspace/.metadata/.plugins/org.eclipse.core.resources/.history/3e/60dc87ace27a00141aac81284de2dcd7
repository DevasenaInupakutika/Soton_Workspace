package uk.ac.software.blogreader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Date;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpHead;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.cookie.DateUtils;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.NavUtils;
import android.util.Log;
import android.view.MenuItem;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import uk.ac.software.parser.DOMParser;
import uk.ac.software.parser.RSSFeed;

public class LoadingActivity extends Activity{
	private String RSSFEEDURL = "http://www.software.ac.uk/blog/rss-all";
	RSSFeed feed = null;
	String fileName;
    DOMParser myParser = new DOMParser();
    private static final String TAG = "MyActivity";
	
	
	//Progress Bar Functionality
		private ProgressBar mProgress;
		private int mProgressStatus=0;
		private Handler mHandler = new Handler();
		private TextView textView;	
		
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch(item.getItemId()){
		case android.R.id.home:
			NavUtils.navigateUpFromSameTask(this);
			return true;
		}
		//Intent that will return to previous activity.
				Intent myIntent = new Intent(getApplicationContext(),MainActivity.class);
				myIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
				startActivityForResult(myIntent,0);
				return super.onOptionsItemSelected(item);
			}
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_blogs_display_list);
        
      //Progress bar on Loading activity screen
      		mProgress = (ProgressBar)findViewById(R.id.progress_bartop);
      		textView = (TextView)findViewById(R.id.textview1);
      		
      		fileName = "SSIRSSFeed.blog";

      		File feedFile = getBaseContext().getFileStreamPath(fileName);

      		ConnectivityManager conMgr = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
      		if (conMgr.getActiveNetworkInfo() == null) {

      			// No connectivity. Check if feed File exists
      			if (!feedFile.exists()) {

      				// No connectivity & Feed file doesn't exist: Show alert to exit
      				// & check for connectivity
      				AlertDialog.Builder builder = new AlertDialog.Builder(this);
      				builder.setMessage(
      						"Unable to reach server, \nPlease check your connectivity.")
      						.setTitle("SSI Blog")
      						.setCancelable(false)
      						.setPositiveButton("Exit",
      								new DialogInterface.OnClickListener() {
      									@Override
      									public void onClick(DialogInterface dialog,
      											int id) {
      										finish();
      									}
      								});

      				AlertDialog alert = builder.create();
      				alert.show();
      			} else {

      				// No connectivity and file exists: Read feed from the File
      				Toast toast = Toast.makeText(this,
      						"No connectivity! Reading last update...",
      						Toast.LENGTH_LONG);
      				toast.show();
      				feed = ReadFeed(fileName);
      				startListActivity(feed);
      			}

      		} else {

      		     if (feedFile.exists()){
      				
      		    	 HttpClient httpClient = new DefaultHttpClient();
      		    	 HttpHead httpHead = new HttpHead(RSSFEEDURL);
      		    	 
      		    	 long date = feedFile.lastModified();
      		    	 String lastModified = DateUtils.formatDate(new Date(date),"EEE, d MMM yyyy HH:mm:ss 'GMT'");
      		    	 
      		    	 httpHead.addHeader("If-Modified-Since",lastModified);
      		    	 try {
						HttpResponse response = httpClient.execute(httpHead);
						int statusCode = response.getStatusLine().getStatusCode();
						
						if (statusCode == HttpStatus.SC_NOT_MODIFIED)
						{
						Toast toast = Toast.makeText(this,
	      						"Cached file is in sync with last server update",
	      						Toast.LENGTH_LONG);
						toast.show();
	      				feed = ReadFeed(fileName);
	      				startListActivity(feed);
						}
						else{
							
							Toast toast = Toast.makeText(this,
		      						"Updating cache file",
		      						Toast.LENGTH_LONG);
							toast.show();
						}
							
					} catch (ClientProtocolException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
      				
      			}
      			// Connected - Start parsing
      			else
      			   new AsyncLoadXMLFeed().execute();

      		}

      	}
	private class AsyncCheckFeedUpdate extends AsyncTask<Void, Void, Void> {

  		@Override
  		protected Void doInBackground(Void... params) {
  		    
  			return null;

  		}

  		@Override
  		protected void onPostExecute(Void result) {
  			super.onPostExecute(result);

  			startListActivity(feed);
  		}

  	}

      	private void startListActivity(RSSFeed feed) {

      		Bundle bundle = new Bundle();
      		bundle.putSerializable("feed", feed);

      		// launch List activity
      		Intent intent = new Intent(LoadingActivity.this, ListActivity.class);
      		intent.putExtras(bundle);
      		startActivity(intent);

      		// kill this activity
      		finish();

      	}

      	private class AsyncLoadXMLFeed extends AsyncTask<Void, Void, Void> {

      		@Override
      		protected Void doInBackground(Void... params) {
      			
      			//Progress bar populating list view thread
      			new Thread(new Runnable(){

      				@Override
      				public void run() {
      					// TODO Auto-generated method stub
      					while(mProgressStatus < 100){
      						mProgressStatus += 1;
      						
      						//Update Progress Bar
      						mHandler.post(new Runnable(){

      							@Override
      							public void run() {
      								// TODO Auto-generated method stub
      								mProgress.setProgress(mProgressStatus);
      								textView.setText(mProgressStatus + "%");
 
      								
      							}
      							
      							
      						});
      						try{
      							Thread.sleep(1000);
      						}
      						catch(InterruptedException e){
      							e.printStackTrace();
      						}
      					}
      					
      				}
      				
      			}).start();
      			final long httpCacheSize = 10 * 1024 * 1024; // 10 MiB
      			final File httpCacheDir = new File(getCacheDir(), "http");
      			try {
      			Class.forName("android.net.http.HttpResponseCache")
      			.getMethod("install", File.class, long.class)
      			.invoke(null, httpCacheDir, httpCacheSize);
      			} catch (Exception httpResponseCacheNotAvailable) {
      			Log.i(TAG, "android.net.http.HttpResponseCache not available, probably because we're running on a pre-ICS version of Android"+httpResponseCacheNotAvailable);
      			try{
      			com.integralblue.httpresponsecache.HttpResponseCache.install(httpCacheDir, httpCacheSize);
      			}catch(Exception e){
      			Log.i(TAG,"Failed to set up com.integralblue.httpresponsecache.HttpResponseCache"+e);
      			}
      			}			
      		
      		// Obtain feed
	        feed = myParser.parseXml(RSSFEEDURL);
	      		
	      	if (feed != null && feed.getItemCount() > 0)
	      		WriteFeed(feed);
      			return null;

      		}

      		@Override
      		protected void onPostExecute(Void result) {
      			super.onPostExecute(result);

      			startListActivity(feed);
      		}

      	}

      	// Method to write the feed to the File
      	private void WriteFeed(RSSFeed data) {

      		FileOutputStream fOut = null;
      		ObjectOutputStream osw = null;

      		try {
      			fOut = openFileOutput(fileName, MODE_PRIVATE);
      			osw = new ObjectOutputStream(fOut);
      			
      		    osw.writeObject(data);
      			osw.flush();
      		}

      		catch (Exception e) {
      			e.printStackTrace();
      		}

      		finally {
      			try {
      				fOut.close();
      			} catch (IOException e) {
      				e.printStackTrace();
      			}
      		}
      	}

      	// Method to read the feed from the File
      	private RSSFeed ReadFeed(String fName) {

      		FileInputStream fIn = null;
      		ObjectInputStream isr = null;

      		RSSFeed _feed = null;
      		File feedFile = getBaseContext().getFileStreamPath(fileName);
      		if (!feedFile.exists())
      			return null;

      		try {
      			fIn = openFileInput(fName);
      			isr = new ObjectInputStream(fIn);

      			_feed = (RSSFeed) isr.readObject();
      		}

      		catch (Exception e) {
      			e.printStackTrace();
      		}

      		finally {
      			try {
      				fIn.close();
      			} catch (IOException e) {
      				e.printStackTrace();
      			}
      		}

      		return _feed;

      	}

	
}