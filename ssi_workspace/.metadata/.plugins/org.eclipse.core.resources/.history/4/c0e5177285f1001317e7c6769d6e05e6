package com.example.ssitestapp;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.app.Application;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.NavUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.ImageView;	
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.TextView;


public class ListActivity extends Activity{
	
	Application myApp;
	RSSFeed feed;
	ListView lv = null;
	CustomListAdapter adapter = null;
	
	private ProgressDialog pDialog;
	private static final String RSSFEEDURL = "http://www.software.ac.uk/blog/rss-all";
	
	DOMParser myParser;
	String xml;
	
	private ArrayList<RSSItem> blogs;

	private static final String TAG = "MyActivity";
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch (item.getItemId()) {
		case android.R.id.home:
			NavUtils.navigateUpFromSameTask(this);
			return true;
			//super.onBackPressed();
			
		}
		//Intent that will return to previous activity.
				Intent myIntent = new Intent(getApplicationContext(),MainActivity.class );
				myIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
			    startActivityForResult(myIntent, 0);

				return super.onOptionsItemSelected(item);
	}
	
	//Variables to be used in pagination logic
	private final static int ITEMS_PPAGE = 20;
	boolean loadingMore = true;
	boolean lastPage = false;
	int currentPage = 0;
	int previousTotal = 0;
	int visibleThreshold = 5;
	
	//views in activity
	ImageView iv = null;
	TextView tvTitle = null;
	TextView tvDate = null;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.feed_list);
		
		getActionBar().setDisplayHomeAsUpEnabled(true);
		
		blogs = new ArrayList<RSSItem>();
		
		// Get feed from the file
		feed = (RSSFeed) getIntent().getExtras().get("feed");
		
		// Initialise the variables
		lv = (ListView) findViewById(R.id.listView);
		lv.setVerticalFadingEdgeEnabled(true);
		
		adapter = new CustomListAdapter(ListActivity.this,blogs);
		lv.setAdapter(adapter);

		new loadListView().execute();		

		//Endless scrolling list.
		
		lv.setOnScrollListener(new OnScrollListener() {
			
			@Override

	        public void onScrollStateChanged(AbsListView view, int scrollState) {

                  //Do Nothing.
	        }
          
	        @Override
	        public void onScroll(AbsListView view, int firstVisibleItem,
	                int visibleItemCount, int totalItemCount) {
	        	
	        	Log.v(TAG, "Total Item Count is:"+totalItemCount);
	        	Log.v(TAG, "Previous Item Count is:"+previousTotal);
	        	
	        	if(loadingMore){
	        		if (totalItemCount > previousTotal) {
	                    loadingMore = false;
	                    previousTotal = totalItemCount;
	                    currentPage++;
	                 
	                    // Find your own condition in order to know when you 
	                    // have finished displaying all items
	                    if (currentPage + 1 > 50) {
	                        lastPage = true;
	                    }
	                }
	        	}
	        	
	        	if (!lastPage && !loadingMore && (totalItemCount - visibleItemCount) <= (firstVisibleItem + visibleThreshold)) {
	                // I load the next page of blogs using a background task,
	                // but you can call any function here.
	                new addListItemsAsyncTask().execute();
	                loadingMore = true;
	            }
	        	

	        }


	    });
	
		//Setting onItem click listener to List View.
		
		lv.setOnItemClickListener(new OnItemClickListener(){
		
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				// actions to be performed when a list item clicked
				int pos = arg2;
				Bundle bundle = new Bundle();
				bundle.putSerializable("feed", feed);
				Intent intent = new Intent(ListActivity.this,DetailActivity.class);
				//RSSItem result = blogs.get(pos);
				//intent.putExtra("result",result);
				intent.putExtras(bundle);
				intent.putExtra("pos", pos);
				//Three lines below for displaying detail blog post in mobile browser.
				/*Intent i = new Intent(Intent.ACTION_VIEW);
				i.setData(Uri.parse(feed.getItem(pos).getLink()));
				startActivity(i);*/
				startActivity(intent);
				}

			
		});
	
	
	}

    public class loadListView extends AsyncTask<Integer, String, String>{

    	/* (non-Javadoc)
		 * @see android.os.AsyncTask#onPreExecute()
		 */
		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub
			super.onPreExecute();
			 pDialog = new ProgressDialog(ListActivity.this);
	            pDialog.setTitle("Connect to Server");
	            pDialog.setMessage("This process can take a few seconds to a few minutes, depending on your Internet Connection Speed.");
	            pDialog.setIndeterminate(false);
	            pDialog.setCancelable(false);
	            pDialog.show();
		}

		
		@Override
		protected String doInBackground(Integer... params) {
			// TODO Auto-generated method stub
			myParser = new DOMParser();
			xml = myParser.getXmlFromUrl(RSSFEEDURL);
            feed = myParser.parseXml(xml,0);
            for(int i=0;i<20;i++){
            	blogs.add(feed.getItem(i));         	
              }
           
            return null;
		}
		
		/* (non-Javadoc)
		 * @see android.os.AsyncTask#onPostExecute(java.lang.Object)
		 */
		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			adapter = new CustomListAdapter(ListActivity.this,blogs);
			lv.setAdapter(adapter);
			pDialog.dismiss();
		}
    	
    }
    
    interface IBlogsReadyListener {
        public void onIBlogsReady(ArrayList<RSSItem> data);
      }

    
    public class addListItemsAsyncTask extends AsyncTask<Void, Void, ArrayList<RSSItem>> implements IBlogsReadyListener {

    	/*
         * The point from where to start counting. In a real
         * life scenario this could be a pagination number
         */
        int startPoint;
        IBlogsReadyListener listener;

        protected addListItemsAsyncTask(IBlogsReadyListener listener,int startPoint) {
          this.listener = listener;
          this.startPoint=startPoint;
        }
	
		@Override
		protected ArrayList<RSSItem> doInBackground(Void... params) {
			// TODO Auto-generated method stub
			final ArrayList<RSSItem> results=new ArrayList<RSSItem>();
			new Thread(new Runnable(){

				@Override
				public void run() {
					// TODO Auto-generated method stub
					// Parsing 20 more items and adding them to the adapter
					try{
						 myParser = new DOMParser();
						 xml = myParser.getXmlFromUrl(RSSFEEDURL);
					     feed = myParser.parseXml(xml,startPoint);       
                    //Adding parsed items to adapter.
					     Thread.sleep(3000); //pretend to do work
                    for (int i = startPoint; i < startPoint + 20 ; i++) {
                    	results.add(feed.getItem(i));      
                    }
                   
					}
					catch (Exception ex){
						ex.printStackTrace();
					}
				}
				
				
			}).start();
			return(results);
		}
		

		/* (non-Javadoc)
		 * @see android.os.AsyncTask#onPostExecute(java.lang.Object)
		 */
		@Override
		protected void onPostExecute(ArrayList<RSSItem> result) {
			// TODO Auto-generated method stub
			listener.onIBlogsReady(result);
		
		}
		@Override
		public void onIBlogsReady(ArrayList<RSSItem> data) {
			// TODO Auto-generated method stub
			
		}

    	
    }
 

	
	//Adapter for Blogs ListView.
	
	class BlogListAdapter extends EndlessAdapter{
		
		
		private View pendingView = null;
		
		private LayoutInflater layoutInflater;
		
		public ImageLoader imageLoader;
		
		private List<RSSItem> blogsList;
		
		
		BlogListAdapter(Context context, ArrayList<RSSItem> blogsList){
			
			super(new ArrayAdapter<RSSItem>(context,
                    R.layout.list_item,
                    android.R.id.text1,
                    blogsList));
			layoutInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			imageLoader = new ImageLoader(context.getApplicationContext());
			this.blogsList = blogsList;
		
		}
		
		/* (non-Javadoc)
		 * @see com.example.ssitestapp.EndlessAdapter#getPendingView(android.view.ViewGroup)
		 */
		@Override
		protected View getPendingView(ViewGroup parent) {
			// TODO Auto-generated method stub
			View listItem = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item,null);
			pendingView = listItem.findViewById(android.R.id.text1);
			pendingView.setVisibility(View.GONE);
			
		    pendingView=listItem.findViewById(R.id.thumb);
		    pendingView.setVisibility(View.VISIBLE);
		    
		    pendingView=listItem.findViewById(R.id.title);
		    pendingView.setVisibility(View.VISIBLE);
		    
		    pendingView=listItem.findViewById(R.id.date);
		    pendingView.setVisibility(View.VISIBLE);
		    
			return listItem;
		}

		
		@Override
		protected boolean cacheInBackground() throws Exception {
			// TODO Auto-generated method stub
			new addListItemsAsyncTask().execute();
			return false;
		}

		@Override
		protected void appendCachedData() {
			// TODO Auto-generated method stub
			
		}
		
		
		
		
	}
	
}
