package com.example.ssitestapp;

import java.util.List;
import java.util.Map;

import com.example.ssitestapp.InfiniteScrollListView.LoadingMode;
import com.example.ssitestapp.InfiniteScrollListView.StopPosition;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ImageView;
import android.widget.Toast;

/**
 * Activity for the listView with infinite scrolling capability
 * It shows how to make the loading happen when the list view reaches its top or bottom
 * It also shows how to display a customizable view as the loading indicator view either
 * at the top or bottom of the list view
 */

public class InfiniteScrollListActivity extends Activity{
	// A setting for how many blogs should be loaded at once from the server
		private static final int SERVER_SIDE_BATCH_SIZE = 10;
		private static final String RSSFEEDURL = "http://www.software.ac.uk/blog/rss-all";;

		private InfiniteScrollListView blogListView;
	
		private ImageView iv;

		private BlogListAdapter blogListAdapter;
		private BogusRemoteService bogusRemoteService;
		private Handler handler;
		private AsyncTask<Void, Void, List<String>> fetchAsyncTask;

	    private RSSFeed feed;
		private LoadingMode loadingMode = LoadingMode.SCROLL_TO_BOTTOM;
		private StopPosition stopPosition = StopPosition.REMAIN_UNCHANGED;

		public InfiniteScrollListActivity () {
			super();
			//DOM parser and feed part.
		}

		@Override
		protected void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			setContentView(R.layout.feed_list);
			handler = new Handler();

			blogListView = (InfiniteScrollListView) this.findViewById(R.id.listView);
			
			iv = (ImageView) this.findViewById(R.id.imageView);

			blogListView.setLoadingMode(loadingMode);
			LayoutInflater layoutInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			blogListView.setLoadingView(layoutInflater.inflate(R.layout.loading_view_demo, null));
			blogListAdapter = new BlogListAdapter(new NewPageListener() {
				@Override
				public void onScrollNext() {
					fetchAsyncTask = new AsyncTask<Void, Void, List<String>>() {
						@Override
						protected void onPreExecute() {
							// Loading lock to allow only one instance of loading
	                    	blogListAdapter.lock();
						}
						@Override
	                    protected List<String> doInBackground(Void ... params) {
	                    	List<String> result;
	                    	// Mimic loading data from a remote service
	                    	if (loadingMode == LoadingMode.SCROLL_TO_TOP) {
	    						result = bogusRemoteService.getNextMessageBatch(SEVER_SIDE_BATCH_SIZE);
	    					} else {
	    						result = bogusRemoteService.getNextSushiBatch(SEVER_SIDE_BATCH_SIZE);
	    					}
	    					return result;
	                    }
	                    @Override
	                    protected void onPostExecute(List<String> result) {
	        				if (isCancelled() || result == null || result.isEmpty()) {
	        					blogListAdapter.notifyEndOfList();
	        				} else {
	        					// Add data to the placeholder
	        					if (loadingMode == LoadingMode.SCROLL_TO_TOP) {
	        						blogListAdapter.addEntriesToTop(result);
	        					} else {
	            					blogListAdapter.addEntriesToBottom(result);
	        					}
	        					// Add or remove the loading view depend on if there might be more to load
	        					if (result.size() < SEVER_SIDE_BATCH_SIZE) {
	        						blogListAdapter.notifyEndOfList();
	        					} else {
	        						blogListAdapter.notifyHasMore();
	        					}
	        					// Get the focus to the specified position when loading completes
	        					if (loadingMode == LoadingMode.SCROLL_TO_TOP) {
	        						switch(stopPosition) {
	        							case REMAIN_UNCHANGED:
	                						blogListView.setSelection(result.size());
	                						break;
	        							case START_OF_LIST:
	        								blogListView.setSelection(result.size() < SEVER_SIDE_BATCH_SIZE ? 0 : 1);
	                    					break;
	        							case END_OF_LIST:
	                						blogListView.setSelection(1);
	    	        						blogListView.smoothScrollToPosition(blogListAdapter.getCount());
	        						}
	        					} else {
	        						if (stopPosition != StopPosition.REMAIN_UNCHANGED) {
	        							blogListView.smoothScrollToPosition(stopPosition == StopPosition.START_OF_LIST ? 0 : (result.size() < SEVER_SIDE_BATCH_SIZE ? demoListAdapter.getCount() : demoListAdapter.getCount() - 2));
	        						}
	        					}
	        				}
	                    };
	                    @Override
	                    protected void onCancelled() {
	                    	// Tell the adapter it is end of the list when task is cancelled
	    					blogListAdapter.notifyEndOfList();
	                    }
					}.execute();
				}
				@Override
				public View getInfiniteScrollListView(int position, View convertView, ViewGroup parent) {
					// Customize the row for list view
					if(convertView == null) {
						LayoutInflater layoutInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
						convertView = layoutInflater.inflate(R.layout.row_demo, null);
					}
					String name = (String) demoListAdapter.getItem(position);
					if (name != null) {
						TextView rowName = (TextView) convertView.findViewById(R.id.row_name);
						ImageView rowPhoto = (ImageView) convertView.findViewById(R.id.row_photo);
						rowName.setText(name);
						if (loadingMode == LoadingMode.SCROLL_TO_TOP) {
							rowPhoto.setImageResource(position % 2 == 0 ? R.drawable.conversation_driver : R.drawable.conversation_officer);
						} else {
							rowPhoto.setImageResource(sushiMappings.get(name));
						}
					}
					return convertView;
				}
			});
			blogListView.setAdapter(demoListAdapter);
			// Display a toast when a list item is clicked
			blogListView.setOnItemClickListener(new OnItemClickListener() {
				public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {
					handler.post(new Runnable() {
						@Override
						public void run() {
							Toast.makeText(InfiniteScrollListActivity.this, blogListAdapter.getItem(position) + " " + getString(R.string.ordered), Toast.LENGTH_SHORT).show();
						}
					});
				}
			});
			loadingModeGroup.check(loadingMode == LoadingMode.SCROLL_TO_TOP ? R.id.infinite_listview_radio_scroll_to_top : R.id.infinite_listview_radio_scroll_to_bottom);
			loadingModeGroup.setOnCheckedChangeListener(new OnCheckedChangeListener() {
		        public void onCheckedChanged(RadioGroup group, int checkedId) {
		    		// Cancel a task if exists when loading mode changes
		        	if (fetchAsyncTask != null) {
		    			fetchAsyncTask.cancel(true);
		    		}
		        	// Reset fake remote service when loading mode changes
		        	bogusRemoteService.reset();
		        	// Remove loading view
		        	blogListAdapter.notifyEndOfList();
		        	// Clear all data points
		        	blogListAdapter.clearEntries();
		        	loadingMode = checkedId == R.id.infinite_listview_radio_scroll_to_top ? LoadingMode.SCROLL_TO_TOP : LoadingMode.SCROLL_TO_BOTTOM;
		        	// Overwrite new loading mode
		        	blogListAdapter.setLoadingMode(loadingMode);
		        	blogListView.setLoadingMode(loadingMode);
		        	// Disable row clicks when display messages
		        	blogListAdapter.setRowEnabled(checkedId == R.id.infinite_listview_radio_scroll_to_top ? false : true);
		        	// Manually loads the first page
		        	blogListAdapter.onScrollNext();
		        }
		    });
			stopPositionGroup.check(stopPosition == StopPosition.START_OF_LIST ? R.id.infinite_listview_radio_start_of_list : (stopPosition == StopPosition.END_OF_LIST ? R.id.infinite_listview_radio_end_of_list : R.id.infinite_listview_radio_remain_unchanged));
			stopPositionGroup.setOnCheckedChangeListener(new OnCheckedChangeListener() {
		        public void onCheckedChanged(RadioGroup group, int checkedId) {
		    		// Cancel a task if exists when stop position setting changes
		        	if (fetchAsyncTask != null) {
		    			fetchAsyncTask.cancel(true);
		    		}
		        	// Reset fake remote service when stop position setting changes
		        	bogusRemoteService.reset();
		        	// Remove loading view
		        	blogListAdapter.notifyEndOfList();
		        	// Clear all data points
		        	blogListAdapter.clearEntries();
		        	stopPosition = checkedId == R.id.infinite_listview_radio_start_of_list ? StopPosition.START_OF_LIST : (checkedId == R.id.infinite_listview_radio_end_of_list ? StopPosition.END_OF_LIST : StopPosition.REMAIN_UNCHANGED);
		        	// Overwrite stop position setting
		        	blogListAdapter.setStopPosition(stopPosition);
		        	blogListView.setStopPosition(stopPosition);
		        	// Manually load the first page
		        	blogListAdapter.onScrollNext();
		        }
		    });
			githubImageView.setOnClickListener(new ImageView.OnClickListener() {
				@Override
				public void onClick(View view) {
					Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(RSSFEEDURL));
					startActivity(intent);
				}
			});
		}

		@Override
		protected void onResume() {
			super.onResume();
			// Load the first page to start demo
			blogListAdapter.onScrollNext();
		}
	

}
