package com.example.ssitestapp;

import java.util.List;

import com.example.ssitestapp.InfiniteScrollListView.LoadingMode;
import com.example.ssitestapp.InfiniteScrollListView.StopPosition;

import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.view.LayoutInflater;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

public class InfiniteScrollListActivity extends Activity{
		
	// A setting for how many items should be loaded at once from the server (software.ac.uk)
	
	private static final int SERVER_SIDE_BATCH_SIDE = 10;
	private static final String RSSFEEDURL = "http://www.software.ac.uk/blog/rss-all";
	
	private InfiniteScrollListView lv;
	private ImageView iv;
	private ImageLoader imageLoader;
	private TextView tvTitle;
	private TextView tvDate;
	
	private BlogListAdapter bloglistAdapter;
	private Handler handler;
	
	private AsyncTask<Void, Void, List<RSSItem>> fetchAsyncTask;
	private RSSFeed feed;
	
	private LoadingMode loadingMode = LoadingMode.SCROLL_TO_BOTTOM;
	private StopPosition stopPosition = StopPosition.REMAIN_UNCHANGED;

	public InfiniteScrollListActivity(){
		super();
		// Get feed from the file
				feed = (RSSFeed) getIntent().getExtras().get("feed");
	}
	
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.feed_list);
		
		getActionBar().setDisplayHomeAsUpEnabled(true);
		
		handler = new Handler();
		
		// Initialise the variables
		lv = (InfiniteScrollListView) findViewById(R.id.listView);
		lv.setVerticalFadingEdgeEnabled(true);
		
		lv.setLoadingMode(loadingMode);
		LayoutInflater layoutInflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		lv.setLoadingView(layoutInflater.inflate(R.layout.list_item,null));
		
		imageLoader = new ImageLoader(getApplicationContext());
		iv = (ImageView) findViewById(R.id.thumb);
		tvTitle = (TextView) findViewById(R.id.title);
		tvDate = (TextView) findViewById(R.id.date);
		
		bloglistAdapter = new BlogListAdapter(new NewPageListener(){
			@Override
			public void onScrollNext() {
				fetchAsyncTask = new AsyncTask<Void, Void, List<>>() {
					@Override
					protected void onPreExecute() {
						// Loading lock to allow only one instance of loading
                    	demoListAdapter.lock();
					}
					@Override
                    protected List<String> doInBackground(Void ... params) {
                    	List<String> result;
                    	// Mimic loading data from a remote service
                    	if (loadingMode == LoadingMode.SCROLL_TO_TOP) {
    						result = bogusRemoteService.getNextMessageBatch(SEVER_SIDE_BATCH_SIZE);
    					} else {
    						result = bogusRemoteService.getNextSushiBatch(SEVER_SIDE_BATCH_SIZE);
    					}
    					return result;
                    }
                    @Override
                    protected void onPostExecute(List<String> result) {
        				if (isCancelled() || result == null || result.isEmpty()) {
        					demoListAdapter.notifyEndOfList();
        				} else {
        					// Add data to the placeholder
        					if (loadingMode == LoadingMode.SCROLL_TO_TOP) {
        						demoListAdapter.addEntriesToTop(result);
        					} else {
            					demoListAdapter.addEntriesToBottom(result);
        					}
        					// Add or remove the loading view depend on if there might be more to load
        					if (result.size() < SEVER_SIDE_BATCH_SIZE) {
        						demoListAdapter.notifyEndOfList();
        					} else {
        						demoListAdapter.notifyHasMore();
        					}
        					// Get the focus to the specified position when loading completes
        					if (loadingMode == LoadingMode.SCROLL_TO_TOP) {
        						switch(stopPosition) {
        							case REMAIN_UNCHANGED:
                						demoListView.setSelection(result.size());
                						break;
        							case START_OF_LIST:
        								demoListView.setSelection(result.size() < SEVER_SIDE_BATCH_SIZE ? 0 : 1);
                    					break;
        							case END_OF_LIST:
                						demoListView.setSelection(1);
    	        						demoListView.smoothScrollToPosition(demoListAdapter.getCount());
        						}
        					} else {
        						if (stopPosition != StopPosition.REMAIN_UNCHANGED) {
        							demoListView.smoothScrollToPosition(stopPosition == StopPosition.START_OF_LIST ? 0 : (result.size() < SEVER_SIDE_BATCH_SIZE ? demoListAdapter.getCount() : demoListAdapter.getCount() - 2));
        						}
        					}
        				}
                    };
                    @Override
                    protected void onCancelled() {
                    	// Tell the adapter it is end of the list when task is cancelled
    					demoListAdapter.notifyEndOfList();
                    }
				}.execute();
				
				
			
		
	}
}
