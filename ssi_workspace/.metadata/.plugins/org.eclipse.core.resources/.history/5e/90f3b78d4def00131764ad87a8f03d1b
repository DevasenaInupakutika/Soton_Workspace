package com.example.ssitestapp;

import android.app.ActionBar;
import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.NavUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;


public class ListActivity extends Activity{
	
	Application myApp;
	RSSFeed feed;
	ListView lv = null;
	CustomListAdapter adapter = null;

	private static final String TAG = "MyActivity";
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch (item.getItemId()) {
		case android.R.id.home:
			NavUtils.navigateUpFromSameTask(this);
			return true;
			//super.onBackPressed();
			
		}
		//Intent that will return to previous activity.
				Intent myIntent = new Intent(getApplicationContext(),MainActivity.class );
				myIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
			    startActivityForResult(myIntent, 0);

				return super.onOptionsItemSelected(item);
	}
	
	//Variables to be used in pagination logic
	boolean flag_loading = true;
	boolean loadingMore = true;
	int curr_count = 0;
	int currentPage = 0;
	
	//views in activity
	ImageView iv = null;
	TextView tvTitle = null;
	TextView tvDate = null;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	    setContentView(R.layout.feed_list);
	    
		// Get feed from the file
		feed = (RSSFeed) getIntent().getExtras().get("feed");
		// Initialise the variables:
		lv = (ListView) findViewById(R.id.listView);
		lv.setVerticalFadingEdgeEnabled(true);
		
		myApp = getApplication();
			
		adapter = new CustomListAdapter(this);
		lv.setAdapter(adapter);
		
		//Endless scrolling list.
		
		lv.setOnScrollListener(new OnScrollListener() {
			
			@Override

	        public void onScrollStateChanged(AbsListView view, int scrollState) {

                  //Do Nothing.
				/*if(scrollState == SCROLL_STATE_IDLE){
					if(lv.getLastVisiblePosition() >= lv.getCount()-1){
						currentPage++;
						//load more items
						//loadBlogs(currentPage);
						adapter.getView(currentPage, lv, null);
					}
				}*/
	        }
          
	        @Override
	        public void onScroll(AbsListView view, int firstVisibleItem,
	                int visibleItemCount, int totalItemCount) {
	        	
	        	/*boolean loadMore = /* may be add a padding */
	        	        //firstVisibleItem + visibleItemCount >= totalItemCount;
	        	        
	        	/*if(loadMore){
	        		adapter.count += visibleItemCount;
	        		adapter.notifyDataSetChanged();
	        	}*/

	        }

			/*private void additems() {
				// TODO Auto-generated method stub
				lv.setAdapter(adapter);
				flag_loading = false;
				adapter.notifyDataSetChanged();
			}*/


	    });

		
		//Setting onItem click listener to List View.
		
		lv.setOnItemClickListener(new OnItemClickListener(){
		
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				// actions to be performed when a list item clicked
				int pos = arg2;
				Bundle bundle = new Bundle();
				bundle.putSerializable("feed", feed);
				Intent intent = new Intent(ListActivity.this,DetailActivity.class);
				intent.putExtras(bundle);
				intent.putExtra("pos", pos);
				startActivity(intent);
				}

			
		});
		
		ActionBar actionBar = getActionBar();
		actionBar.setDisplayHomeAsUpEnabled(true);
		
		//Show up button in the action bar.
		setupActionBar();
			
	}

	
  private void setupActionBar() {
		// TODO Auto-generated method stub
	  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			
			getActionBar().setDisplayHomeAsUpEnabled(true);
		
	}
}


	// @Override
    protected void onDestroy() {
		super.onDestroy();
		//adapter.imageLoader.clearCache();
		adapter.notifyDataSetChanged();
		}
	
    public ImageLoader imageLoader;
	
	class CustomListAdapter extends BaseAdapter{
		
		private LayoutInflater layoutInflater;
		
		//int count = 20; /* starting amount */
		
		 
		public CustomListAdapter(ListActivity activity) {
		 
		layoutInflater = (LayoutInflater) activity
		                  .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		imageLoader = new ImageLoader(activity.getApplicationContext());
		
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return feed.getItemCount();
			//return count;
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			View listItem = convertView;
			int pos = position;
			
			//Implementing light weight Holder
			
			ViewHolder holder = null;
			
			holder.position = position;
			
			new BloglistTask(position,holder).executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,null);
				
			if (listItem == null) {
					listItem = layoutInflater.inflate(R.layout.list_item, null);
					holder = new ViewHolder();
					
					
					// Initialise the views in the layout
					holder.iv = (ImageView) listItem.findViewById(R.id.thumb);
					holder.tvTitle = (TextView) listItem.findViewById(R.id.title);
					holder.tvDate = (TextView) listItem.findViewById(R.id.date);
				 	
					listItem.setTag(holder);
			        
				}
			else{
				holder = (ViewHolder) listItem.getTag();
			}
					
			// Set the views in the layout
			    //imageLoader.DisplayImage(feed.getItem(pos).getImage(), iv);
				holder.tvTitle.setText(feed.getItem(pos).getTitle());
			
				Log.v(TAG, "Link is:"+feed.getItem(pos).getLink());
		    
				//Including day and date.
				holder.tvDate.setText(feed.getItem(pos).getDate().substring(4, 16));
			
			
			return listItem;
		
		}
	}
	
	
	
	private class BloglistTask extends AsyncTask<Void,Void,Void> {

		/* (non-Javadoc)
		 * @see android.os.AsyncTask#onPostExecute(java.lang.Object)
		 */
		String url;
		@Override
		protected void onPostExecute(Void result) {
			// TODO Auto-generated method stub
			if(mHolder.position == mPosition)
				imageLoader.DisplayImage(url, mHolder.iv);
			super.onPostExecute(result);
		}

		private int mPosition;
		private ViewHolder mHolder;
		RSSFeed feed = (RSSFeed) getIntent().getExtras().get("feed");
		
		public BloglistTask(int position,ViewHolder holder){
			mPosition = position;
			mHolder = holder;	
		}

		@Override
		protected Void doInBackground(Void... params) {
			// TODO Auto-generated method stub
			url = feed.getItem(mPosition).getImage();
			return null;
		}
		
		
		
	}

	private static class ViewHolder {

		public ImageView iv ;
		public TextView tvTitle;
		public TextView tvDate;
		public int position;
	}

}
