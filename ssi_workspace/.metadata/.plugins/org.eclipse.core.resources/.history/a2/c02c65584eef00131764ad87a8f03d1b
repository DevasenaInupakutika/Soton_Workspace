package com.example.ssitestapp;

import android.app.ActionBar;
import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.support.v4.app.NavUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;


public class ListActivity extends Activity{
	
	Application myApp;
	RSSFeed feed;
	ListView lv = null;
	CustomListAdapter adapter = null;

	private static final String TAG = "MyActivity";
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch (item.getItemId()) {
		case android.R.id.home:
			NavUtils.navigateUpFromSameTask(this);
			return true;
			//super.onBackPressed();
			
		}
		//Intent that will return to previous activity.
				Intent myIntent = new Intent(getApplicationContext(),MainActivity.class );
				myIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
			    startActivityForResult(myIntent, 0);

				return super.onOptionsItemSelected(item);
	}
	
	//Variables to be used in pagination logic
	boolean loadingMore = true;
	int currentPage = 0;
	int previousTotal = 0;
	int visibleThreshold = 7;
	
	//views in activity
	ImageView iv = null;
	TextView tvTitle = null;
	TextView tvDate = null;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
	    setContentView(R.layout.feed_list);
	    
		// Get feed from the file
		feed = (RSSFeed) getIntent().getExtras().get("feed");
		// Initialise the variables:
		lv = (ListView) findViewById(R.id.listView);
		lv.setVerticalFadingEdgeEnabled(true);
		
		myApp = getApplication();
			
		adapter = new CustomListAdapter(this);
		lv.setAdapter(adapter);
		
		//Endless scrolling list.
		
		lv.setOnScrollListener(new OnScrollListener() {
			
			@Override

	        public void onScrollStateChanged(AbsListView view, int scrollState) {

                  //Do Nothing.
				/*if(scrollState == SCROLL_STATE_IDLE){
					if(lv.getLastVisiblePosition() >= lv.getCount()-1){
						currentPage++;
						//load more items
						//loadBlogs(currentPage);
						adapter.getView(currentPage, lv, null);
					}
				}*/
	        }
          
	        @Override
	        public void onScroll(AbsListView view, int firstVisibleItem,
	                int visibleItemCount, int totalItemCount) {
	        	
	        	if(loadingMore){
	        		if (visibleItemCount > totalItemCount) {
	                    loadingMore = false;
	                    previousTotal = totalItemCount;
	                    currentPage++;
	                }
	        	}
	        	
	        	if (!loadingMore && (totalItemCount - visibleItemCount) <= (firstVisibleItem + visibleThreshold)) {
	                // I load the next page of gigs using a background task,
	                // but you can call any function here.
	                new listView().execute(currentPage + 1);
	                loadingMore = true;
	            }
	        	

	        }


	    });

		
		//Setting onItem click listener to List View.
		
		lv.setOnItemClickListener(new OnItemClickListener(){
		
			@Override
			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
					long arg3) {
				// actions to be performed when a list item clicked
				int pos = arg2;
				Bundle bundle = new Bundle();
				bundle.putSerializable("feed", feed);
				Intent intent = new Intent(ListActivity.this,DetailActivity.class);
				intent.putExtras(bundle);
				intent.putExtra("pos", pos);
				startActivity(intent);
				}

			
		});
		
		ActionBar actionBar = getActionBar();
		actionBar.setDisplayHomeAsUpEnabled(true);
		
		//Show up button in the action bar.
		setupActionBar();
			
	}

	
  private void setupActionBar() {
		// TODO Auto-generated method stub
	  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
			
			getActionBar().setDisplayHomeAsUpEnabled(true);
		
	}
}


	// @Override
    protected void onDestroy() {
		super.onDestroy();
		//adapter.imageLoader.clearCache();
		adapter.notifyDataSetChanged();
		}
	
 
	class CustomListAdapter extends BaseAdapter{
		
		private LayoutInflater layoutInflater;
		public ImageLoader imageLoader;
			
		public CustomListAdapter(ListActivity activity) {
		 
		layoutInflater = (LayoutInflater) activity
		                  .getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		imageLoader = new ImageLoader(activity.getApplicationContext());
		
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return feed.getItemCount();
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			View listItem = convertView;
			int pos = position;
				
			if (listItem == null) {
					listItem = layoutInflater.inflate(R.layout.list_item, null);
				
					// Initialise the views in the layout
					iv = (ImageView) listItem.findViewById(R.id.thumb);
					tvTitle = (TextView) listItem.findViewById(R.id.title);
					tvDate = (TextView) listItem.findViewById(R.id.date);
				 	
				
				}
			
			// Set the views in the layout
			    imageLoader.DisplayImage(feed.getItem(pos).getImage(), iv);
				tvTitle.setText(feed.getItem(pos).getTitle());
			
				Log.v(TAG, "Link is:"+feed.getItem(pos).getLink());
		    
				//Including day and date.
				tvDate.setText(feed.getItem(pos).getDate().substring(4, 16));
			
			
			return listItem;
		
		}
	}
	
	
}
