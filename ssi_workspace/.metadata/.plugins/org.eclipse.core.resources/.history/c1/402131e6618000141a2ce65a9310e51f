package uk.ac.software.parser;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;

import uk.ac.software.blogreader.image.ImageLoader;

import android.util.Log;

public class SAXSSIParser extends DefaultHandler {

	
	String TAG = "SAXSSIHelper";
	
	Boolean currTag = false;
	String currTagVal = "";
	public RSSItem item = null;
	//public RSSFeed feed = new RSSFeed();
	public ArrayList<RSSItem> feeds = new ArrayList<RSSItem>();
	
	private String htmlBlog = new String();
	String htmlString;
	private static StringBuilder sb1;
	public ImageLoader imageLoader;
	
	//Method to read XML from RSSFeedURL link
	
	public void get(String RSSFEEDURL){
		
		try{
			 SAXParserFactory factory = SAXParserFactory.newInstance();
			 SAXParser mSaxParser = factory.newSAXParser();
			 XMLReader mXmlReader = mSaxParser.getXMLReader();
			 mXmlReader.setContentHandler(this);
			 InputStream mInputStream = new URL(RSSFEEDURL).openStream();
			 mXmlReader.parse(new InputSource(mInputStream));
		}
		catch(Exception e){
			
			Log.e(TAG, "Exception:"+e.getMessage());
		}
	}
	
	//This method receives notification character data inside an element
	@Override
	 public void characters(char[] ch, int start, int length)
	 throws SAXException {
	 if(currTag) {
	 currTagVal = currTagVal + new String(ch, start, length);
	 currTag = false;
	 }
	 }
	
	public String parseHtml(String link){
		
		URL blogURL = null;
		try {
			blogURL = new URL(link);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			InputStream is = (InputStream) blogURL.getContent();
			BufferedReader br = new BufferedReader(new InputStreamReader(is));
			String line = null;
			StringBuffer sb = new StringBuffer();
			
			while((line = br.readLine()) != null){
				   sb.append(line);
				 }
				 htmlBlog = sb.toString();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return htmlBlog;
		
	}
	
	//Receives notification of end of element
	@Override
	 public void endElement(String uri, String localName, String qName)
	 throws SAXException {
		
		 Log.i(TAG, "TAG: " + localName);
		 
		 currTag = true;
		 currTagVal = "";
		 // Whenever <post> element is encountered it will create new object of PostValue
		 if(localName.equals("item"))
		 item = new RSSItem();
	
	 
}
	
	//Receives notification of start of an element
	@Override
	 public void startElement(String uri, String localName, String qName,
	 Attributes attributes) throws SAXException {
	
	 currTag = false;
	 
	 if(localName.equalsIgnoreCase("title"))
	 item.setTitle(currTagVal); 
	 
	 else if(localName.equalsIgnoreCase("link")){
	     htmlString = parseHtml(currTagVal);
		 item.setLink(currTagVal);
	 }
	 else if(localName.equalsIgnoreCase("description")){
		 
		//Parse the html description to get blog content without 'Read More'	
		    org.jsoup.nodes.Document htmlDoc = Jsoup.parse(htmlString);
			 
			Element blogs = htmlDoc.select("div[class=content]").first();
			
			Elements writer = htmlDoc.body().getElementsByAttributeValue("class", "submitted");
			
		   //For image element of main image in blog post
			Element pngs = blogs.select("img").first();
			//Elements eleImg = htmlDoc.select("img");
			
			
			sb1 = new StringBuilder();

			//Checking if CSS Style sheet created and included locally would work.
			sb1.append("<html>");
			sb1.append("<head>");
			sb1.append("<link rel=stylesheet href='css/SSIStyle.css'>");
			sb1.append("</head>");
			sb1.append("<body>");
			pngs.remove(); //Removing main blog image from the webview content.
			//eleImg.attr("style", "height:300px; width:400px");
		    sb1.append(blogs.html().toString().replaceAll("&nbsp;", ""));
		    sb1.append("<font color=#999999>");
		    sb1.append(writer.text());
		    sb1.append("</font>");
		    sb1.append("</body></html>");
		    
			item.setDescription(sb1.toString());

			// Parse the html description to get the image url
			String html = currTagVal;
			org.jsoup.nodes.Document docHtml = Jsoup
					.parse(html);
			Elements imgEle = docHtml.select("img");
		
			if(imgEle.isEmpty()){
				imgEle = docHtml.select("iframe");
			    item.setVideo(imgEle.attr("src"));
			    
			}
		    else
		    	imgEle.removeAttr("style");
			    item.setImage(imgEle.attr("src"));
	
		
		}
	


	 else if(localName.equalsIgnoreCase("pubDate")){
		 String formatedDate = currTagVal.replace(" +0000",
					"");
	     item.setDate(formatedDate);	
	 }
	 
	 else if(localName.equalsIgnoreCase("item"))
	     feeds.add(item);
	 }
	
}
