package uk.ac.software.parser;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;

import uk.ac.software.blogreader.image.ImageLoader;

import android.util.Log;

public class SAXSSIParser extends DefaultHandler {

	
	String TAG = "SAXSSIHelper";
	// Feed and Blog objects to use for temporary storage
	public RSSItem item = new RSSItem();
	//public RSSFeed feed = new RSSFeed();
	public List<RSSItem> feeds = new ArrayList<RSSItem>();
	
	//Number of blogs added so far
	private int blogsAdded = 0;
	
	//Number of blogs to download
	private static final int BLOGS_LIMIT = 20;
	
	private String htmlBlog = new String();
	String htmlString;
	private static StringBuilder sb1;
	public ImageLoader imageLoader;
	
	//Current characters being accumulated
	StringBuffer chars = new StringBuffer();
	
	public List<RSSItem> getBlogList() {
		return feeds;
	}
	
	/* 
	 * This method is called every time a start element is found (an opening XML marker)
	 * here we always reset the characters StringBuffer as we are only currently interested
	 * in the the text values stored at leaf nodes
	 * 
	 * (non-Javadoc)
	 * @see org.xml.sax.helpers.DefaultHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)
	 */
	public void startElement(String uri, String localName, String qName, Attributes atts) {
		chars = new StringBuffer();
	}
	
	
	/* 
	 * This method is called every time an end element is found (a closing XML marker)
	 * here we check what element is being closed, if it is a relevant leaf node that we are
	 * checking, such as Title, then we get the characters we have accumulated in the StringBuffer
	 * and set the current Blog's title to the value
	 * 
	 * If this is closing the "entry", it means it is the end of the blog, so we add that to the list
	 * and then reset our Blog object for the next one on the stream
	 * 
	 * 
	 * (non-Javadoc)
	 * @see org.xml.sax.helpers.DefaultHandler#endElement(java.lang.String, java.lang.String, java.lang.String)
	 */
	public void endElement(String uri, String localName, String qName) throws SAXException {

		if (localName.equalsIgnoreCase("title")){
			item.setTitle(chars.toString());
		}	
		else if(qName.equalsIgnoreCase("link")){
			     htmlString = parseHtml(chars.toString());
				 item.setLink(chars.toString());
			 }		
		else if (localName.equalsIgnoreCase("description")){
			//Parse the html description to get blog content without 'Read More'	
		    org.jsoup.nodes.Document htmlDoc = Jsoup.parse(htmlString);
			 
			Element blogs = htmlDoc.select("div[class=content]").first();
			
			Elements writer = htmlDoc.body().getElementsByAttributeValue("class", "submitted");
			
		   //For image element of main image in blog post
			Element pngs = blogs.select("img").first();
			//Elements eleImg = htmlDoc.select("img");
			
			
			sb1 = new StringBuilder();

			//Checking if CSS Style sheet created and included locally would work.
			sb1.append("<html>");
			sb1.append("<head>");
			sb1.append("<link rel=stylesheet href='css/SSIStyle.css'>");
			sb1.append("</head>");
			sb1.append("<body>");
			pngs.remove(); //Removing main blog image from the webview content.
			//eleImg.attr("style", "height:300px; width:400px");
		    sb1.append(blogs.html().toString().replaceAll("&nbsp;", ""));
		    sb1.append("<font color=#999999>");
		    sb1.append(writer.text());
		    sb1.append("</font>");
		    sb1.append("</body></html>");
		    
			item.setDescription(sb1.toString());

			// Parse the html description to get the image url
			String html = chars.toString();
			org.jsoup.nodes.Document docHtml = Jsoup
					.parse(html);
			Elements imgEle = docHtml.select("img");
		
			if(imgEle.isEmpty()){
				imgEle = docHtml.select("iframe");
			    item.setVideo(imgEle.attr("src"));
			    
			}
		    else
		    	imgEle.removeAttr("style");
			    item.setImage(imgEle.attr("src"));
		} 
		else if (localName.equalsIgnoreCase("pubDate")){
			String formatedDate = chars.toString().replace(" +0000",
					"");
	        item.setDate(formatedDate);
		} 


		// Check if looking for blog, and if blog is complete
		if (localName.equalsIgnoreCase("item")) {

			feeds.add(item);

			item = new RSSItem();

			// Lets check if we've hit our limit on number of articles
			blogsAdded++;
			if (blogsAdded >= BLOGS_LIMIT)
			{
				throw new SAXException();
			}
		}
	}

  //parseHtml function to get the blog link
  public String parseHtml(String link){
		
		URL blogURL = null;
		try {
			blogURL = new URL(link);
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			InputStream is = (InputStream) blogURL.getContent();
			BufferedReader br = new BufferedReader(new InputStreamReader(is));
			String line = null;
			StringBuffer sb = new StringBuffer();
			
			while((line = br.readLine()) != null){
				   sb.append(line);
				 }
				 htmlBlog = sb.toString();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return htmlBlog;
		
	}
  /* 
	 * This method is called when characters are found in between XML markers, however, there is no
	 * guarantee that this will be called at the end of the node, or that it will be called only once
	 * , so we just accumulate these and then deal with them in endElement() to be sure we have all the
	 * text
	 * 
	 * (non-Javadoc)
	 * @see org.xml.sax.helpers.DefaultHandler#characters(char[], int, int)
	 */
	public void characters(char ch[], int start, int length) {
		chars.append(new String(ch, start, length));
	}
	
}
	