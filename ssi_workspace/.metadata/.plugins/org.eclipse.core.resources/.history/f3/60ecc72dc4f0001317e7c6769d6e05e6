package com.example.ssitestapp;

import java.util.ArrayList;
import java.util.List;

import android.app.Activity;
import android.app.Application;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v4.app.NavUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.BaseAdapter;
import android.widget.ImageView;	
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.example.ssitestapp.EndlessListView;
import com.example.ssitestapp.EndlessListView.OnLoadMoreListener;


public class ListActivity extends Activity{
	
	/* (non-Javadoc)
	 * @see android.app.Activity#onCreateOptionsMenu(android.view.Menu)
	 */
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		menu.add(0, ID_MENU_REFRESH, 0, "Refresh");
        return super.onCreateOptionsMenu(menu);
	}


	RSSFeed feed;
	CustomListAdapter adapter;
	
	//Endless Scrolling listview parameters
	EndlessListView elv;
	private static final int ID_MENU_REFRESH = 666;
	private int mCount;
	private boolean mHaveMoreDataToLoad;
	
	private ProgressDialog pDialog;
	private static final String RSSFEEDURL = "http://www.software.ac.uk/blog/rss-all";
	
	DOMParser myParser = new DOMParser();
	String xml;
	
	private ArrayList<RSSItem> blogs;

	private static final String TAG = "MyActivity";
	
	//Variables to be used in pagination logic
	private final static int ITEMS_PPAGE = 20;
	boolean loadingMore = true;
	boolean lastPage = false;
	int currentPage = 0;
	int previousTotal = 0;
	int visibleThreshold = 5;
	
	//views in activity
	ImageView iv = null;
	TextView tvTitle = null;
	TextView tvDate = null;

	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		if (ID_MENU_REFRESH == item.getItemId()) {
			List<RSSItem> blogs = new ArrayList<RSSItem>();
			for (int i = 0; i < 20; i++) {
				blogs.add(feed.getItem(i));
			}

			mCount = 0;
			mHaveMoreDataToLoad = true;
			adapter = new CustomListAdapter(ListActivity.this, blogs);
			elv.setAdapter(adapter);

			return true;
		} else {
			//Intent that will return to previous activity.
			Intent myIntent = new Intent(getApplicationContext(),MainActivity.class );
			myIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
		    startActivityForResult(myIntent, 0);
			return super.onOptionsItemSelected(item);
		}
		
		
	}
	

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.feed_list);
		
		getActionBar().setDisplayHomeAsUpEnabled(true);
		
		blogs = new ArrayList<RSSItem>();
		
		// Get feed from the file
		feed = (RSSFeed) getIntent().getExtras().get("feed");
		
		xml = myParser.getXmlFromUrl(RSSFEEDURL);
        feed = myParser.parseXml(xml,0);
		
		mCount = 0;
		mHaveMoreDataToLoad = true;
		adapter = new CustomListAdapter(ListActivity.this, blogs);
		
		// Initialise the variables
		elv = (EndlessListView) findViewById(R.id.listView);
		elv.setAdapter(adapter);
		elv.setOnLoadMoreListener(loadMoreListener);
	
	}
	
	
	private void loadMoreData() {
		new LoadMore().execute((Void) null);
	}
	
	
	private EndlessListView.OnLoadMoreListener loadMoreListener = new EndlessListView.OnLoadMoreListener() {

		@Override
		public boolean onLoadMore() {
			if (true == mHaveMoreDataToLoad) {
				loadMoreData();
			} else {
				Toast.makeText(ListActivity.this, "No more data to load",
						Toast.LENGTH_SHORT).show();
			}

			return mHaveMoreDataToLoad;
		}
	};
	
	private class LoadMore extends AsyncTask<Void,Void,List<RSSItem>> {

		@Override
		protected List<RSSItem> doInBackground(Void... params) {
			// TODO Auto-generated method stub
			return null;
		}
		

	}







   
	class CustomListAdapter extends BaseAdapter{
		
		int count = 20;

		private LayoutInflater layoutInflater;
	
		public ImageLoader imageLoader;
		
		private List<RSSItem> blogList;
		
		public CustomListAdapter(ListActivity activity,List<RSSItem> blogList) {
		 
			layoutInflater = (LayoutInflater) activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			imageLoader = new ImageLoader(activity.getApplicationContext());
			this.blogList = blogList;
		
		}
		
		public void add(List<RSSItem> newBlogs){
			if (null == newBlogs || newBlogs.size() <= 0) {
				return;
			}

			if (null == blogList) {
				blogList = new ArrayList<RSSItem>();
			}

			blogList.addAll(newBlogs);
			notifyDataSetChanged();
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			if (null == blogList) {
				return 0;
			}

			return blogList.size();
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return blogList.get(position);
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			View listItem = convertView;
			int pos = position;
				
			if (null== listItem) {
					listItem = layoutInflater.inflate(R.layout.list_item, null);
				
					// Initialise the views in the layout
					iv = (ImageView) listItem.findViewById(R.id.thumb);
					tvTitle = (TextView) listItem.findViewById(R.id.title);
					tvDate = (TextView) listItem.findViewById(R.id.date);
					
					listItem.setTag(iv);
				}
			
			else{
				iv =(ImageView) listItem.getTag();
			}
			
			// Set the views in the layout
			    imageLoader.DisplayImage(blogList.get(pos).getImage(), iv);
				tvTitle.setText(blogList.get(pos).getTitle());
			
				Log.v(TAG, "Link is:"+blogList.get(pos).getLink());
		    
				//Including day and date.
				tvDate.setText(blogList.get(pos).getDate().substring(4, 16));
			
			
			return listItem;
		
		}
	}
	
	
}
